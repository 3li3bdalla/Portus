---
info:
  title: Portus API
  description: Portus CRUD API
  contact:
    name: Portus authors
    email: portus-dev@googlegroups.com
  version: 0.0.1
swagger: '2.0'
produces:
- application/json
securityDefinitions:
  api_key:
    type: apiKey
    name: Portus-Auth
    in: header
security:
- api_key: []
host: 172.17.0.1:3000
tags:
- name: users
  description: Operations about users
- name: health
  description: Operations about healths
- name: namespaces
  description: Operations about namespaces
- name: registries
  description: Operations about registries
- name: repositories
  description: Operations about repositories
- name: tags
  description: Operations about tags
- name: teams
  description: Operations about teams
- name: vulnerabilities
  description: Operations about vulnerabilities
- name: version
  description: Operations about versions
paths:
  "/api/v1/users/{id}/application_tokens":
    get:
      summary: Returns list of user's tokens
      description: Returns list of user's tokens
      produces:
      - application/json
      parameters:
      - in: path
        name: id
        description: User ID
        type: integer
        format: int32
        required: true
      responses:
        '200':
          description: Returns list of user's tokens
          schema:
            type: array
            items:
              "$ref": "#/definitions/ApplicationTokens"
        '401':
          description: Authentication fails
        '403':
          description: Authorization fails
        '404':
          description: Not found
      tags:
      - users
      operationId: getApiV1UsersIdApplicationTokens
    post:
      summary: Create user's token
      description: Create user's token
      produces:
      - application/json
      consumes:
      - application/x-www-form-urlencoded
      - application/json
      parameters:
      - in: formData
        name: application
        description: Application name
        type: string
        required: true
      - in: path
        name: id
        description: User ID
        type: integer
        format: int32
        required: true
      responses:
        '201':
          description: Create user's token
          schema:
            "$ref": "#/definitions/ApplicationTokens"
        '400':
          description: Bad request
          schema:
            "$ref": "#/definitions/ApiErrors"
        '401':
          description: Authentication fails
        '403':
          description: Authorization fails
        '422':
          description: Unprocessable Entity
          schema:
            "$ref": "#/definitions/FullApiErrors"
      tags:
      - users
      operationId: postApiV1UsersIdApplicationTokens
  "/api/v1/users/application_tokens/{id}":
    delete:
      summary: Delete application token
      description: Delete application token
      produces:
      - application/json
      parameters:
      - in: path
        name: id
        description: Token id
        type: string
        required: true
      responses:
        '204':
          description: Delete application token
        '401':
          description: Authentication fails
        '403':
          description: Authorization fails
        '404':
          description: Not found
      tags:
      - users
      operationId: deleteApiV1UsersApplicationTokensId
  "/api/v1/users":
    post:
      summary: Create new user
      description: Create new user
      produces:
      - application/json
      consumes:
      - application/x-www-form-urlencoded
      - application/json
      parameters:
      - in: formData
        name: user[username]
        description: User name
        type: string
        required: true
      - in: formData
        name: user[email]
        description: E-mail
        type: string
        required: true
      - in: formData
        name: user[password]
        description: Password
        type: string
        required: true
      - in: formData
        name: user[display_name]
        description: Display name
        type: string
        required: false
      - in: formData
        name: user[bot]
        description: Whether this is a bot or not
        type: boolean
        required: false
      responses:
        '201':
          description: Create new user
          schema:
            "$ref": "#/definitions/Users"
        '400':
          description: Bad request
          schema:
            "$ref": "#/definitions/ApiErrors"
        '401':
          description: Authentication fails
        '403':
          description: Authorization fails
        '422':
          description: Unprocessable Entity
          schema:
            "$ref": "#/definitions/FullApiErrors"
      tags:
      - users
      operationId: postApiV1Users
    get:
      summary: Returns list of users
      description: This will expose all users
      produces:
      - application/json
      responses:
        '200':
          description: Returns list of users
          schema:
            type: array
            items:
              "$ref": "#/definitions/Users"
        '401':
          description: Authentication fails
        '403':
          description: Authorization fails
      tags:
      - users
      operationId: getApiV1Users
  "/api/v1/users/{id}":
    put:
      summary: Update user
      description: Update user
      produces:
      - application/json
      consumes:
      - application/x-www-form-urlencoded
      - application/json
      parameters:
      - in: formData
        name: user[username]
        description: User name
        type: string
        required: false
      - in: formData
        name: user[email]
        description: E-mail
        type: string
        required: false
      - in: formData
        name: user[password]
        description: Password
        type: string
        required: false
      - in: formData
        name: user[display_name]
        description: Display name
        type: string
        required: false
      - in: path
        name: id
        description: User ID
        type: integer
        format: int32
        required: true
      responses:
        '200':
          description: Update user
          schema:
            "$ref": "#/definitions/Users"
        '400':
          description: Bad request
          schema:
            "$ref": "#/definitions/ApiErrors"
        '401':
          description: Authentication fails
        '403':
          description: Authorization fails
        '404':
          description: Not found
        '422':
          description: Unprocessable Entity
          schema:
            "$ref": "#/definitions/FullApiErrors"
      tags:
      - users
      operationId: putApiV1UsersId
    delete:
      summary: Delete user
      description: Delete user
      produces:
      - application/json
      parameters:
      - in: path
        name: id
        description: User ID
        type: integer
        format: int32
        required: true
      responses:
        '204':
          description: Delete user
        '401':
          description: Authentication fails
        '403':
          description: Authorization fails
        '404':
          description: Not found
      tags:
      - users
      operationId: deleteApiV1UsersId
    get:
      summary: Show user by id or email
      description: Show user by id or email
      produces:
      - application/json
      parameters:
      - in: path
        name: id
        description: User ID or email
        type: string
        required: true
      responses:
        '200':
          description: Show user by id or email
          schema:
            "$ref": "#/definitions/Users"
        '401':
          description: Authentication fails
        '403':
          description: Authorization fails
        '404':
          description: Not found
      tags:
      - users
      operationId: getApiV1UsersId
  "/api/v1/users/bootstrap":
    post:
      summary: Create the first admin user
      description: Use this method to create the first admin user. The response will
        include an application token so you can use this user right away. This method
        should be used when bootstrapping a Portus instance by using the REST API.
        Last but not least, it will respond with a 405 if the `first_user_admin` configuration
        value has been disabled
      produces:
      - application/json
      consumes:
      - application/x-www-form-urlencoded
      - application/json
      parameters:
      - in: formData
        name: user[username]
        description: User name
        type: string
        required: true
      - in: formData
        name: user[email]
        description: E-mail
        type: string
        required: true
      - in: formData
        name: user[password]
        description: Password
        type: string
        required: true
      - in: formData
        name: user[display_name]
        description: Display name
        type: string
        required: false
      responses:
        '201':
          description: Create the first admin user
          schema:
            "$ref": "#/definitions/ApplicationTokens"
        '400':
          description: Bad request
          schema:
            "$ref": "#/definitions/ApiErrors"
        '401':
          description: Authentication fails
        '403':
          description: Authorization fails
        '405':
          description: Method Not Allowed
          schema:
            "$ref": "#/definitions/ApiErrors"
        '422':
          description: Unprocessable Entity
          schema:
            "$ref": "#/definitions/FullApiErrors"
      tags:
      - users
      operationId: postApiV1UsersBootstrap
  "/api/v1/health":
    get:
      summary: Returns hash of metrics
      description: Returns general metrics on the health of the system
      produces:
      - application/json
      responses:
        '200':
          description: Returns hash of metrics
          schema:
            "$ref": "#/definitions/Health"
        '503':
          description: Some of the required services are unhealthy
          schema:
            "$ref": "#/definitions/Health"
      tags:
      - health
      operationId: getApiV1Health
  "/api/v1/namespaces":
    get:
      summary: Returns a list of namespaces
      description: |-
        This will expose all accessible namespaces by the user via either team
                                membership or visibility. Keep in mind that if the user is an admin, this
                                will return all the global, personal and other namespaces created by all
                                the users
      produces:
      - application/json
      responses:
        '200':
          description: Returns a list of namespaces
          schema:
            type: array
            items:
              "$ref": "#/definitions/Namespaces"
        '401':
          description: Authentication fails
        '403':
          description: Authorization fails
      tags:
      - namespaces
      operationId: getApiV1Namespaces
    post:
      summary: Create a namespace
      description: Create a namespace
      produces:
      - application/json
      consumes:
      - application/x-www-form-urlencoded
      - application/json
      parameters:
      - in: formData
        name: name
        description: Namespace name
        type: string
        required: true
      - in: formData
        name: team
        description: Team name
        type: string
        required: true
      - in: formData
        name: description
        description: Team description
        type: string
        required: false
      responses:
        '201':
          description: Create a namespace
          schema:
            "$ref": "#/definitions/Teams"
        '400':
          description: Bad request
          schema:
            "$ref": "#/definitions/ApiErrors"
        '401':
          description: Authentication fails
        '403':
          description: Authorization fails
        '422':
          description: Unprocessable Entity
          schema:
            "$ref": "#/definitions/FullApiErrors"
      tags:
      - namespaces
      operationId: postApiV1Namespaces
  "/api/v1/namespaces/validate":
    get:
      summary: Validates the given namespace
      description: Validates the given namespace
      produces:
      - application/json
      parameters:
      - in: query
        name: name
        description: Name to be checked
        type: string
        required: true
      responses:
        '200':
          description: Validates the given namespace
          schema:
            "$ref": "#/definitions/Status"
        '401':
          description: Authentication fails
        '403':
          description: Authorization fails
      tags:
      - namespaces
      operationId: getApiV1NamespacesValidate
  "/api/v1/namespaces/{id}":
    put:
      summary: Update namespace
      description: Update namespace
      produces:
      - application/json
      consumes:
      - application/x-www-form-urlencoded
      - application/json
      parameters:
      - in: formData
        name: namespace[name]
        description: Namespace name
        type: string
        required: false
      - in: formData
        name: namespace[description]
        description: The description of the namespace
        type: string
        required: false
      - in: formData
        name: namespace[team]
        description: The ID and the name of the team containing this namespace
        type: string
        required: false
      - in: formData
        name: namespace[visibility]
        description: The visibility of namespaces by other people
        type: string
        required: false
      - in: path
        name: id
        description: Namespace ID
        type: integer
        format: int32
        required: true
      responses:
        '200':
          description: Update namespace
        '400':
          description: Bad request
          schema:
            "$ref": "#/definitions/ApiErrors"
        '401':
          description: Authentication fails
        '403':
          description: Authorization fails
        '404':
          description: Not found
        '422':
          description: Unprocessable Entity
          schema:
            "$ref": "#/definitions/FullApiErrors"
      tags:
      - namespaces
      operationId: putApiV1NamespacesId
    delete:
      summary: Delete namespace
      description: Delete namespace
      produces:
      - application/json
      parameters:
      - in: path
        name: id
        description: Namespace ID
        type: integer
        format: int32
        required: true
      responses:
        '204':
          description: Delete namespace
        '401':
          description: Authentication fails
        '403':
          description: Authorization fails
        '404':
          description: Not found
        '422':
          description: Unprocessable Entity
      tags:
      - namespaces
      operationId: deleteApiV1NamespacesId
    get:
      summary: Show namespaces by id
      description: Show namespaces by id
      produces:
      - application/json
      parameters:
      - in: path
        name: id
        description: Namespace ID
        type: integer
        format: int32
        required: true
      responses:
        '200':
          description: Show namespaces by id
          schema:
            "$ref": "#/definitions/Namespaces"
        '401':
          description: Authentication fails
        '403':
          description: Authorization fails
        '404':
          description: Not found
      tags:
      - namespaces
      operationId: getApiV1NamespacesId
  "/api/v1/namespaces/{id}/repositories":
    get:
      summary: Returns the list of the repositories for the given namespace
      description: Returns the list of the repositories for the given namespace
      produces:
      - application/json
      parameters:
      - in: path
        name: id
        description: Namespace ID
        type: integer
        format: int32
        required: true
      responses:
        '200':
          description: Returns the list of the repositories for the given namespace
          schema:
            type: array
            items:
              "$ref": "#/definitions/Repositories"
        '401':
          description: Authentication fails
        '403':
          description: Authorization fails
        '404':
          description: Not found
      tags:
      - namespaces
      operationId: getApiV1NamespacesIdRepositories
  "/api/v1/registries":
    get:
      summary: Returns a list of registries
      description: This will expose all accessible registries
      produces:
      - application/json
      responses:
        '200':
          description: Returns a list of registries
          schema:
            type: array
            items:
              "$ref": "#/definitions/Registries"
        '401':
          description: Authentication fails
        '403':
          description: Authorization fails
      tags:
      - registries
      operationId: getApiV1Registries
    post:
      summary: Create a registry
      description: Allow users to create a registry. This will only work if no registry
        works yet
      produces:
      - application/json
      consumes:
      - application/x-www-form-urlencoded
      - application/json
      parameters:
      - in: formData
        name: registry[name]
        description: The name of the registry
        type: string
        required: true
      - in: formData
        name: registry[hostname]
        description: The hostname of the registry
        type: string
        required: true
      - in: formData
        name: registry[use_ssl]
        description: Whether the registry uses SSL or not
        type: boolean
        required: true
      - in: formData
        name: registry[external_hostname]
        description: An external hostname of the registry, useful if behind a proxy
          with a different FQDN
        type: string
        required: false
      responses:
        '201':
          description: Create a registry
          schema:
            "$ref": "#/definitions/Registries"
        '400':
          description: Bad request
          schema:
            "$ref": "#/definitions/ApiErrors"
        '401':
          description: Authentication fails
        '403':
          description: Authorization fails
        '422':
          description: Unprocessable Entity
          schema:
            "$ref": "#/definitions/FullApiErrors"
      tags:
      - registries
      operationId: postApiV1Registries
  "/api/v1/registries/{id}":
    put:
      summary: Update registry
      description: Update registry
      produces:
      - application/json
      consumes:
      - application/x-www-form-urlencoded
      - application/json
      parameters:
      - in: formData
        name: registry[name]
        description: The name of the registry
        type: string
        required: false
      - in: formData
        name: registry[hostname]
        description: The hostname of the registry
        type: string
        required: false
      - in: formData
        name: registry[use_ssl]
        description: Whether the registry uses SSL or not
        type: boolean
        required: false
      - in: formData
        name: registry[external_hostname]
        description: An external hostname of the registry, useful if behind a proxy
          with a different FQDN
        type: string
        required: false
      - in: path
        name: id
        type: integer
        format: int32
        required: true
      responses:
        '200':
          description: Update registry
          schema:
            "$ref": "#/definitions/Registries"
        '400':
          description: Bad request
          schema:
            "$ref": "#/definitions/ApiErrors"
        '401':
          description: Authentication fails
        '403':
          description: Authorization fails
        '404':
          description: Not found
        '422':
          description: Unprocessable Entity
          schema:
            "$ref": "#/definitions/FullApiErrors"
      tags:
      - registries
      operationId: putApiV1RegistriesId
  "/api/v1/registries/validate":
    get:
      summary: Validates the given registry
      description: Besides containing the usual Status object, it adds the reachable
        validation to the `hostname` field in the `messages` hash. This validation
        returns a string containing the error as given by the registry. If empty then
        everything went well
      produces:
      - application/json
      parameters:
      - in: query
        name: name
        description: The name of the registry
        type: string
        required: false
      - in: query
        name: hostname
        description: The hostname of the registry
        type: string
        required: false
      - in: query
        name: external_hostname
        description: An external hostname of the registry, useful if behind a proxy
          with a different FQDN
        type: string
        required: false
      - in: query
        name: use_ssl
        description: Whether the registry uses SSL or not
        type: boolean
        required: false
      - in: formData
        name: only
        description: Restrict which parameters are to be validated
        type: array
        items:
          type: string
        required: false
      responses:
        '200':
          description: Validates the given registry
          schema:
            "$ref": "#/definitions/Status"
        '401':
          description: Authentication fails
        '403':
          description: Authorization fails
      tags:
      - registries
      operationId: getApiV1RegistriesValidate
  "/api/v1/repositories":
    get:
      summary: Returns list of repositories
      description: This will expose all repositories
      produces:
      - application/json
      responses:
        '200':
          description: Returns list of repositories
          schema:
            type: array
            items:
              "$ref": "#/definitions/Repositories"
        '401':
          description: Authentication fails
        '403':
          description: Authorization fails
      tags:
      - repositories
      operationId: getApiV1Repositories
  "/api/v1/repositories/{id}/tags":
    get:
      summary: Returns the list of the tags for the given repository
      description: Returns the list of the tags for the given repository
      produces:
      - application/json
      parameters:
      - in: path
        name: id
        description: Repository ID
        type: integer
        format: int32
        required: true
      responses:
        '200':
          description: Returns the list of the tags for the given repository
          schema:
            type: array
            items:
              "$ref": "#/definitions/Tags"
        '401':
          description: Authentication fails
        '403':
          description: Authorization fails
        '404':
          description: Not found
      tags:
      - repositories
      operationId: getApiV1RepositoriesIdTags
  "/api/v1/repositories/{id}/tags/grouped":
    get:
      summary: Returns the list of the tags for the given repository groupped by digest
      description: Returns the list of the tags for the given repository groupped
        by digest
      produces:
      - application/json
      parameters:
      - in: path
        name: id
        description: Repository ID
        type: integer
        format: int32
        required: true
      responses:
        '200':
          description: Returns the list of the tags for the given repository groupped
            by digest
          schema:
            type: array
            items:
              "$ref": "#/definitions/Tags"
        '401':
          description: Authentication fails
        '403':
          description: Authorization fails
        '404':
          description: Not found
      tags:
      - repositories
      operationId: getApiV1RepositoriesIdTagsGrouped
  "/api/v1/repositories/{id}/tags/{tag_id}":
    get:
      summary: Show tag by id
      description: Show tag by id
      produces:
      - application/json
      parameters:
      - in: path
        name: id
        description: Repository ID
        type: integer
        format: int32
        required: true
      - in: path
        name: tag_id
        description: Tag ID
        type: string
        required: true
      responses:
        '200':
          description: Show tag by id
          schema:
            "$ref": "#/definitions/Tags"
        '401':
          description: Authentication fails
        '403':
          description: Authorization fails
        '404':
          description: Not found
      tags:
      - repositories
      operationId: getApiV1RepositoriesIdTagsTagId
  "/api/v1/repositories/{id}":
    get:
      summary: Show repositories by id
      description: Show repositories by id
      produces:
      - application/json
      parameters:
      - in: path
        name: id
        description: Repository ID
        type: integer
        format: int32
        required: true
      responses:
        '200':
          description: Show repositories by id
          schema:
            "$ref": "#/definitions/Repositories"
        '401':
          description: Authentication fails
        '403':
          description: Authorization fails
        '404':
          description: Not found
      tags:
      - repositories
      operationId: getApiV1RepositoriesId
    delete:
      summary: Delete repository
      description: Delete repository
      produces:
      - application/json
      parameters:
      - in: path
        name: id
        description: Repository ID
        type: integer
        format: int32
        required: true
      responses:
        '204':
          description: Delete repository
        '401':
          description: Authentication fails
        '403':
          description: Authorization fails
        '404':
          description: Not found
        '422':
          description: Unprocessable Entity
      tags:
      - repositories
      operationId: deleteApiV1RepositoriesId
  "/api/v1/tags":
    get:
      summary: Returns list of tags
      description: This will expose all tags
      produces:
      - application/json
      responses:
        '200':
          description: Returns list of tags
          schema:
            type: array
            items:
              "$ref": "#/definitions/Tags"
        '401':
          description: Authentication fails
        '403':
          description: Authorization fails
      tags:
      - tags
      operationId: getApiV1Tags
  "/api/v1/tags/{id}":
    get:
      summary: Show tag by id
      description: Show tag by id
      produces:
      - application/json
      parameters:
      - in: path
        name: id
        description: Tag ID
        type: integer
        format: int32
        required: true
      responses:
        '200':
          description: Show tag by id
          schema:
            "$ref": "#/definitions/Tags"
        '401':
          description: Authentication fails
        '403':
          description: Authorization fails
        '404':
          description: Not found
      tags:
      - tags
      operationId: getApiV1TagsId
    delete:
      summary: Delete tag
      description: Delete tag
      produces:
      - application/json
      parameters:
      - in: path
        name: id
        description: Tag ID
        type: integer
        format: int32
        required: true
      responses:
        '204':
          description: Delete tag
        '401':
          description: Authentication fails
        '403':
          description: Authorization fails
        '404':
          description: Not found
        '422':
          description: Unprocessable Entity
      tags:
      - tags
      operationId: deleteApiV1TagsId
  "/api/v1/teams":
    get:
      summary: Returns list of teams
      description: |-
        This will expose all teams that the user is member of or has access to.
                                That mean if the user is an admin, this will return all the teams created by
                                all the users. If you want to check if the user is a member of a team, check
                                the role attribute.
      produces:
      - application/json
      responses:
        '200':
          description: Returns list of teams
          schema:
            type: array
            items:
              "$ref": "#/definitions/Teams"
        '401':
          description: Authentication fails
        '403':
          description: Authorization fails
      tags:
      - teams
      operationId: getApiV1Teams
    post:
      summary: Create a team
      description: Create a team
      produces:
      - application/json
      consumes:
      - application/x-www-form-urlencoded
      - application/json
      parameters:
      - in: formData
        name: name
        description: Team name
        type: string
        required: true
      - in: formData
        name: description
        description: Team description
        type: string
        required: false
      - in: formData
        name: owner_id
        description: Team owner
        type: integer
        format: int32
        required: false
      responses:
        '201':
          description: Create a team
          schema:
            "$ref": "#/definitions/Teams"
        '400':
          description: Bad request
          schema:
            "$ref": "#/definitions/ApiErrors"
        '401':
          description: Authentication fails
        '403':
          description: Authorization fails
        '422':
          description: Unprocessable Entity
          schema:
            "$ref": "#/definitions/FullApiErrors"
      tags:
      - teams
      operationId: postApiV1Teams
  "/api/v1/teams/{id}":
    put:
      summary: Update team
      description: Update team
      produces:
      - application/json
      consumes:
      - application/x-www-form-urlencoded
      - application/json
      parameters:
      - in: formData
        name: team[name]
        description: Team name
        type: string
        required: false
      - in: formData
        name: team[description]
        description: The description of the team
        type: string
        required: false
      - in: path
        name: id
        description: Team ID
        type: integer
        format: int32
        required: true
      responses:
        '200':
          description: Update team
        '400':
          description: Bad request
          schema:
            "$ref": "#/definitions/ApiErrors"
        '401':
          description: Authentication fails
        '403':
          description: Authorization fails
        '404':
          description: Not found
        '422':
          description: Unprocessable Entity
          schema:
            "$ref": "#/definitions/FullApiErrors"
      tags:
      - teams
      operationId: putApiV1TeamsId
    get:
      summary: Show teams by id
      description: Show teams by id
      produces:
      - application/json
      parameters:
      - in: path
        name: id
        description: Team ID
        type: string
        required: true
      responses:
        '200':
          description: Show teams by id
          schema:
            "$ref": "#/definitions/Teams"
        '401':
          description: Authentication fails
        '403':
          description: Authorization fails
        '404':
          description: Not found
      tags:
      - teams
      operationId: getApiV1TeamsId
  "/api/v1/teams/{id}/namespaces":
    get:
      summary: Returns the list of namespaces for the given team
      description: Returns the list of namespaces for the given team
      produces:
      - application/json
      parameters:
      - in: path
        name: id
        description: Team ID
        type: integer
        format: int32
        required: true
      responses:
        '200':
          description: Returns the list of namespaces for the given team
          schema:
            type: array
            items:
              "$ref": "#/definitions/Namespaces"
        '401':
          description: Authentication fails
        '403':
          description: Authorization fails
        '404':
          description: Not found
      tags:
      - teams
      operationId: getApiV1TeamsIdNamespaces
  "/api/v1/teams/{id}/members":
    get:
      summary: Returns the list of team members
      description: Returns the list of team members
      produces:
      - application/json
      parameters:
      - in: path
        name: id
        description: Team ID
        type: integer
        format: int32
        required: true
      responses:
        '200':
          description: Returns the list of team members
          schema:
            type: array
            items:
              "$ref": "#/definitions/Users"
        '401':
          description: Authentication fails
        '403':
          description: Authorization fails
        '404':
          description: Not found
      tags:
      - teams
      operationId: getApiV1TeamsIdMembers
    post:
      summary: Adds a user as member in a team
      description: Adds a user as member in a team
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - in: path
        name: id
        description: Team id
        type: string
        required: true
      - in: formData
        name: role
        description: Team member role
        type: string
        required: true
      - in: formData
        name: user
        description: Team member username
        type: string
        required: true
      responses:
        '201':
          description: Adds a user as member in a team
          schema:
            "$ref": "#/definitions/TeamMembers"
        '401':
          description: Authentication fails
        '403':
          description: Authorization fails
        '404':
          description: Not found
      tags:
      - teams
      operationId: postApiV1TeamsIdMembers
  "/api/v1/teams/{id}/members/{member_id}":
    delete:
      summary: Deletes a member from a team
      description: Deletes a member from a team
      produces:
      - application/json
      parameters:
      - in: path
        name: id
        description: Team id
        type: string
        required: true
      - in: path
        name: member_id
        description: Team member id
        type: string
        required: true
      responses:
        '400':
          description: Unprocessable Entity
          schema:
            "$ref": "#/definitions/ApiErrors"
        '401':
          description: Authentication fails
        '204':
          description: Deletes a member from a team
          schema:
            "$ref": "#/definitions/TeamMembers"
        '403':
          description: Authorization fails
        '404':
          description: Not found
        '422':
          description: Unprocessable Entity
      tags:
      - teams
      operationId: deleteApiV1TeamsIdMembersMemberId
    put:
      summary: Updates a member from a team
      description: Updates a member from a team
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - in: path
        name: id
        description: Team id
        type: string
        required: true
      - in: path
        name: member_id
        description: Team member id
        type: integer
        format: int32
        required: true
      - in: formData
        name: role
        description: Team member role
        type: string
        required: true
      responses:
        '200':
          description: Updates a member from a team
          schema:
            "$ref": "#/definitions/TeamMembers"
        '400':
          description: Unprocessable Entity
          schema:
            "$ref": "#/definitions/ApiErrors"
        '401':
          description: Authentication fails
        '403':
          description: Authorization fails
        '404':
          description: Not found
        '422':
          description: Unprocessable Entity
          schema:
            "$ref": "#/definitions/ApiErrors"
      tags:
      - teams
      operationId: putApiV1TeamsIdMembersMemberId
  "/api/v1/vulnerabilities":
    post:
      summary: Force re-schedule for all tags
      description: Force the security scanner to go through all the tags again, even
        if they have been marked as scanned
      produces:
      - application/json
      consumes:
      - application/json
      responses:
        '201':
          description: Force re-schedule for all tags
        '401':
          description: Authentication fails
        '403':
          description: Authorization fails
      tags:
      - vulnerabilities
      operationId: postApiV1Vulnerabilities
  "/api/v1/vulnerabilities/{id}":
    post:
      summary: Force re-schedule for the given tag
      description: Force the security scanner to scan again a given tag,even if it
        was already marked as scanned
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - in: path
        name: id
        type: integer
        format: int32
        required: true
      responses:
        '201':
          description: Force re-schedule for the given tag
        '401':
          description: Authentication fails
        '403':
          description: Authorization fails
      tags:
      - vulnerabilities
      operationId: postApiV1VulnerabilitiesId
  "/api/v1/_ping":
    get:
      summary: Ping this API
      description: Returns 200 as a status code
      produces:
      - application/json
      responses:
        '200':
          description: Ping this API
      tags:
      - health
      operationId: getApiV1Ping
  "/api/version":
    get:
      summary: Fetch the version of Portus
      description: Returns the version of Portus and the supported API versions
      produces:
      - application/json
      responses:
        '200':
          description: Fetch the version of Portus
          schema:
            "$ref": "#/definitions/Version"
      tags:
      - version
      operationId: getApiVersion
definitions:
  ApplicationTokens:
    type: object
    properties:
      id:
        type: integer
        format: int32
      application:
        type: string
      plain_token:
        type: string
    description: Use this method to create the first admin user. The response will
      include an application token so you can use this user right away. This method
      should be used when bootstrapping a Portus instance by using the REST API. Last
      but not least, it will respond with a 405 if the `first_user_admin` configuration
      value has been disabled
  ApiErrors:
    type: object
    properties:
      message:
        type: string
        description: Error message
    description: Updates a member from a team
  FullApiErrors:
    type: object
    properties:
      message:
        type: object
        description: Detailed hash with the fields
    description: Update team
  Users:
    type: object
    properties:
      id:
        type: integer
        format: int32
        description: User ID
      username:
        type: string
        description: User name
      email:
        type: string
        description: E-mail
      current_sign_in_at:
        type: string
        format: date-time
      last_sign_in_at:
        type: string
        format: date-time
      created_at:
        type: string
        format: date-time
      updated_at:
        type: string
        format: date-time
      admin:
        type: boolean
      enabled:
        type: boolean
      locked_at:
        type: string
        format: date-time
      namespace_id:
        type: integer
        format: int32
      display_name:
        type: string
        description: Display name
      bot:
        type: boolean
        description: Whether this is a bot or not
      display_username:
        type: string
        description: Displayable name
      namespaces_count:
        type: integer
        format: int32
        description: The number of namespaces that user has access to
      teams_count:
        type: integer
        format: int32
        description: The number of teams that the user belongs to
    description: Returns the list of team members
  Health:
    type: object
    properties:
      database:
        "$ref": "#/definitions/HealthStatus"
        description: Database health status
      registry:
        "$ref": "#/definitions/HealthStatus"
        description: Registry health status
      clair:
        "$ref": "#/definitions/HealthStatus"
        description: CoreOS Clair health status. Empty if Clair support has not been
          enabled
    description: Returns general metrics on the health of the system
  HealthStatus:
    type: object
    properties:
      msg:
        type: string
        description: Description message
      success:
        type: boolean
        description: Whether health checking was successful or not for the component
  Namespaces:
    type: object
    properties:
      id:
        type: integer
        format: int32
        description: Namespace ID
      name:
        type: string
        description: Namespace name
      created_at:
        type: string
        format: date-time
      updated_at:
        type: string
        format: date-time
      description:
        type: string
        description: The description of the namespace
      description_md:
        type: string
        description: The description of the namespace parsed by markdown
      team:
        type: string
        description: The ID and the name of the team containing this namespace
      repositories_count:
        type: integer
        format: int32
        description: The number of repositories that belong to this namespace
      webhooks_count:
        type: integer
        format: int32
        description: The number of webooks that belong to this namespace
      visibility:
        type: string
        description: The visibility of namespaces by other people
      global:
        type: boolean
        description: Whether this is the global namespace or not
      updatable:
        type: string
        description: Boolean that tells if the current user can manage the namespace
      destroyable:
        type: string
        description: Boolean that tells if the current user can destroy the namespace
      permissions:
        type: string
        description: Different permissions for the current user
    description: Returns the list of namespaces for the given team
  Status:
    type: object
    properties:
      messages:
        type: object
        description: Detailed hash with the fields
      valid:
        type: boolean
        description: Whether the given resource is valid or not
    description: Besides containing the usual Status object, it adds the reachable
      validation to the `hostname` field in the `messages` hash. This validation returns
      a string containing the error as given by the registry. If empty then everything
      went well
  Teams:
    type: object
    properties:
      id:
        type: integer
        format: int32
        description: Team ID
      name:
        type: string
        description: Team name
      created_at:
        type: string
        format: date-time
      updated_at:
        type: boolean
        description: Whether the team is visible to the final user or not
      description:
        type: string
        description: The description of the team
      description_md:
        type: string
        description: The description of the team parsed by markdown
      hidden:
        type: boolean
        description: Whether the team is visible to the final user or not
      role:
        type: string
        description: The role this of the current user within this team
      updatable:
        type: string
        description: Boolean that tells if the current user can manage the team
      users_count:
        type: integer
        format: int32
        description: The number of enabled users that belong to this team
      namespaces_count:
        type: integer
        format: int32
        description: The number of namespaces that belong to this team
    description: Show teams by id
  Repositories:
    type: object
    properties:
      id:
        type: integer
        format: int32
        description: Repository ID
      name:
        type: string
        description: Repository name
      full_name:
        type: string
        description: Repository full name
      created_at:
        type: string
        format: date-time
      updated_at:
        type: string
        format: date-time
      namespace:
        type: string
        description: The ID of the namespace containing this repository
      registry_hostname:
        type: integer
        format: int32
        description: The repository's registry hostname. Prioritizes external hostname
          valueif present, otherwise internal hostname is shown
      stars:
        type: integer
        format: int32
        description: The number of stars for this repository
      tags_count:
        type: integer
        format: int32
        description: The number of tags for this repository
      tags:
        type: array
        items:
          type: string
        description: The repository's tags grouped by digest
      starred:
        type: string
        description: Boolean that tells if the current user starred the repository
      destroyable:
        type: string
        description: Boolean that tells if the current user can destroy or not the
          repository
    description: Show repositories by id
  Registries:
    type: object
    properties:
      id:
        type: integer
        format: int32
      name:
        type: string
        description: The name of the registry
      hostname:
        type: string
        description: The hostname of the registry
      external_hostname:
        type: string
        description: An external hostname of the registry, useful if behind a proxy
          with a different FQDN
      use_ssl:
        type: boolean
        description: Whether the registry uses SSL or not
      created_at:
        type: string
        format: date-time
      updated_at:
        type: string
        format: date-time
    description: Update registry
  Tags:
    type: object
    properties:
      id:
        type: integer
        format: int32
        description: Tag ID
      name:
        type: string
        description: Tag name
      author:
        type: integer
        format: int32
        description: The ID of the user that pushed this tag
      digest:
        type: string
        description: The digest of the tag
      image_id:
        type: string
        description: The internal image ID
      created_at:
        type: string
        format: date-time
      updated_at:
        type: string
        format: date-time
      scanned:
        type: integer
        format: int32
        description: 'Whether vulnerabilities have been scanned or not. The values
          available are: 0 (not scanned), 1 (work in progress) and 2 (scanning done).'
      vulnerabilities:
        type: string
        description: A hash of vulnerabilities for this tag, or null if the feature
          is not enabled
    description: Show tag by id
  TeamMembers:
    type: object
    properties:
      id:
        type: integer
        format: int32
        description: Team member ID
      team_id:
        type: integer
        format: int32
        description: Team member team ID
      user_id:
        type: integer
        format: int32
        description: Team member user ID
      created_at:
        type: string
        format: date-time
      updated_at:
        type: string
        format: date-time
      role:
        type: string
        description: The role this of the team meber with in the team
      display_name:
        type: string
        description: The team member's display name
      admin:
        type: string
        description: Tells if the team member is an admin or not
      current:
        type: string
        description: Tells if it's the current session user
    description: Adds a user as member in a team
  Version:
    type: object
    properties:
      api-versions:
        type: string
        description: Versions of the API supported
      git:
        type: string
        description: Git information
      version:
        type: string
        description: Version of Portus
    description: Returns the version of Portus and the supported API versions
